// Core Functions

// Color functions
// ------------------------

// Get a color variant (lighter or darker)
@function clad-color-variant($color, $level) {
  @if $level > 0 {
    @return lighten($color, $level * 8%);
  } @else if $level < 0 {
    @return darken($color, abs($level) * 8%);
  } @else {
    @return $color;
  }
}

// Calculate color contrast ratio against white and black
// Returns the color (black or white) with the best contrast ratio
@function clad-color-contrast($color) {
  $r: red($color);
  $g: green($color);
  $b: blue($color);
  
  // Calculate relative luminance
  $r-srgb: $r / 255;
  $g-srgb: $g / 255;
  $b-srgb: $b / 255;
  
  $r-linear: if($r-srgb <= 0.03928, $r-srgb / 12.92, pow(($r-srgb + 0.055) / 1.055, 2.4));
  $g-linear: if($g-srgb <= 0.03928, $g-srgb / 12.92, pow(($g-srgb + 0.055) / 1.055, 2.4));
  $b-linear: if($b-srgb <= 0.03928, $b-srgb / 12.92, pow(($b-srgb + 0.055) / 1.055, 2.4));
  
  $luminance: 0.2126 * $r-linear + 0.7152 * $g-linear + 0.0722 * $b-linear;
  
  // Return black for light colors, white for dark colors
  @return if($luminance > 0.5, #000, #fff);
}

// Tint a color (mix with white)
@function clad-tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

// Shade a color (mix with black)
@function clad-shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}

// Generate a color palette from a base color
@function clad-color-palette($base-color, $levels: 9) {
  $palette: ();
  $step: floor(100 / ($levels - 1));
  
  @for $i from 0 through ($levels - 1) {
    $lightness: 100% - ($i * $step);
    $key: floor($lightness / 10) * 10;
    $palette: map-merge($palette, ($key: clad-tint($base-color, $lightness)));
  }
  
  @return $palette;
}

// Math functions
// ------------------------

// Strip units from a value
@function clad-strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}

// Convert px to rem
@function clad-px-to-rem($px, $base-font-size: 16px) {
  @return ($px / $base-font-size) * 1rem;
}

// Convert rem to px
@function clad-rem-to-px($rem, $base-font-size: 16px) {
  @return ($rem * $base-font-size) / 1rem;
}

// Map functions
// ------------------------

// Get a value from a nested map
@function clad-map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

// Check if a map has a nested key
@function clad-map-has-nested-key($map, $keys...) {
  @each $key in $keys {
    @if not map-has-key($map, $key) {
      @return false;
    }
    $map: map-get($map, $key);
  }
  @return true;
}

// String functions
// ------------------------

// Convert a string to uppercase
@function clad-to-upper($string) {
  $upper: '';
  $lowercase: 'abcdefghijklmnopqrstuvwxyz';
  $uppercase: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  
  @for $i from 1 through str-length($string) {
    $char: str-slice($string, $i, $i);
    $index: str-index($lowercase, $char);
    
    @if $index {
      $upper: $upper + str-slice($uppercase, $index, $index);
    } @else {
      $upper: $upper + $char;
    }
  }
  
  @return $upper;
}

// Convert a string to lowercase
@function clad-to-lower($string) {
  $lower: '';
  $lowercase: 'abcdefghijklmnopqrstuvwxyz';
  $uppercase: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  
  @for $i from 1 through str-length($string) {
    $char: str-slice($string, $i, $i);
    $index: str-index($uppercase, $char);
    
    @if $index {
      $lower: $lower + str-slice($lowercase, $index, $index);
    } @else {
      $lower: $lower + $char;
    }
  }
  
  @return $lower;
}

// CSS Variables and Theme Functions
// ------------------------

// Get CSS variable value with fallback
@function clad-var($variable, $fallback: null) {
  @if $fallback {
    @return var(--clad-#{$variable}, $fallback);
  } @else {
    @return var(--clad-#{$variable});
  }
}

// Generate HSL color with CSS variables
@function clad-color($color, $variant: null) {
  @if $variant == 'light' {
    @return var(--clad-#{$color}-light);
  } @else if $variant == 'dark' {
    @return var(--clad-#{$color}-dark);
  } @else {
    @return var(--clad-#{$color});
  }
}